#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define ff__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer ff__create_buffer
#endif

#ifdef yy_delete_buffer
#define ff__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer ff__delete_buffer
#endif

#ifdef yy_scan_buffer
#define ff__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer ff__scan_buffer
#endif

#ifdef yy_scan_string
#define ff__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string ff__scan_string
#endif

#ifdef yy_scan_bytes
#define ff__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes ff__scan_bytes
#endif

#ifdef yy_init_buffer
#define ff__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer ff__init_buffer
#endif

#ifdef yy_flush_buffer
#define ff__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer ff__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define ff__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state ff__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define ff__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer ff__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define ff_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state ff_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define ff_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state ff_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define ff_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack ff_ensure_buffer_stack
#endif

#ifdef yylex
#define ff_lex_ALREADY_DEFINED
#else
#define yylex ff_lex
#endif

#ifdef yyrestart
#define ff_restart_ALREADY_DEFINED
#else
#define yyrestart ff_restart
#endif

#ifdef yylex_init
#define ff_lex_init_ALREADY_DEFINED
#else
#define yylex_init ff_lex_init
#endif

#ifdef yylex_init_extra
#define ff_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ff_lex_init_extra
#endif

#ifdef yylex_destroy
#define ff_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ff_lex_destroy
#endif

#ifdef yyget_debug
#define ff_get_debug_ALREADY_DEFINED
#else
#define yyget_debug ff_get_debug
#endif

#ifdef yyset_debug
#define ff_set_debug_ALREADY_DEFINED
#else
#define yyset_debug ff_set_debug
#endif

#ifdef yyget_extra
#define ff_get_extra_ALREADY_DEFINED
#else
#define yyget_extra ff_get_extra
#endif

#ifdef yyset_extra
#define ff_set_extra_ALREADY_DEFINED
#else
#define yyset_extra ff_set_extra
#endif

#ifdef yyget_in
#define ff_get_in_ALREADY_DEFINED
#else
#define yyget_in ff_get_in
#endif

#ifdef yyset_in
#define ff_set_in_ALREADY_DEFINED
#else
#define yyset_in ff_set_in
#endif

#ifdef yyget_out
#define ff_get_out_ALREADY_DEFINED
#else
#define yyget_out ff_get_out
#endif

#ifdef yyset_out
#define ff_set_out_ALREADY_DEFINED
#else
#define yyset_out ff_set_out
#endif

#ifdef yyget_leng
#define ff_get_leng_ALREADY_DEFINED
#else
#define yyget_leng ff_get_leng
#endif

#ifdef yyget_text
#define ff_get_text_ALREADY_DEFINED
#else
#define yyget_text ff_get_text
#endif

#ifdef yyget_lineno
#define ff_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno ff_get_lineno
#endif

#ifdef yyset_lineno
#define ff_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno ff_set_lineno
#endif

#ifdef yyget_column
#define ff_get_column_ALREADY_DEFINED
#else
#define yyget_column ff_get_column
#endif

#ifdef yyset_column
#define ff_set_column_ALREADY_DEFINED
#else
#define yyset_column ff_set_column
#endif

#ifdef yywrap
#define ff_wrap_ALREADY_DEFINED
#else
#define yywrap ff_wrap
#endif

#ifdef yyget_lval
#define ff_get_lval_ALREADY_DEFINED
#else
#define yyget_lval ff_get_lval
#endif

#ifdef yyset_lval
#define ff_set_lval_ALREADY_DEFINED
#else
#define yyset_lval ff_set_lval
#endif

#ifdef yyget_lloc
#define ff_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc ff_get_lloc
#endif

#ifdef yyset_lloc
#define ff_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc ff_set_lloc
#endif

#ifdef yyalloc
#define ff_alloc_ALREADY_DEFINED
#else
#define yyalloc ff_alloc
#endif

#ifdef yyrealloc
#define ff_realloc_ALREADY_DEFINED
#else
#define yyrealloc ff_realloc
#endif

#ifdef yyfree
#define ff_free_ALREADY_DEFINED
#else
#define yyfree ff_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ff_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 186
#define YY_END_OF_BUFFER 187
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[664] =
    {   0,
        0,    0,    0,    0,  182,  182,  187,  185,  184,  184,
      185,  185,  185,   62,  180,  135,  126,   50,   26,  107,
       29,  176,  157,  177,    6,   16,  164,   44,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  146,  153,   96,  182,  183,  184,    1,    0,
       42,  177,  176,  175,  119,   20,  179,  179,  179,  179,
      179,  179,  179,  160,  179,  179,  179,   61,  179,  179,
      179,  179,  179,  179,  179,  179,  133,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  110,  179,  163,   64,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  101,  179,   37,
       35,  179,   45,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  149,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      182,  181,  178,  175,  179,  117,  179,  121,  179,   79,
      179,  106,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  151,   55,  179,  179,  179,
      179,  179,  179,  179,  179,   67,  179,  179,  179,  179,
      179,  179,  179,  179,  179,   69,  179,  179,  179,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  127,  179,
      179,  129,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,   85,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,   65,  179,  179,   99,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,   98,  138,   94,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  167,  179,  179,

      104,  130,   73,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  168,   22,  179,  179,  179,  179,
      100,  179,  179,  179,  179,  179,  179,  179,  156,  179,
      123,  179,   11,  112,  124,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  140,  179,  179,  179,  179,  179,
      179,    4,  179,  179,  179,  179,  179,  179,   88,  179,
      179,  179,  179,  179,  179,  179,  122,  179,  179,  179,
      179,  179,  169,    3,   89,   54,  179,   60,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,   86,  147,
      179,  179,    9,   82,  179,   38,  166,  109,  179,   57,

      179,  179,  179,  179,  179,   21,  179,  179,  179,  179,
       93,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,   30,  179,   19,  134,  179,  179,
      179,  179,   97,  179,  179,   48,  179,  161,  179,  179,
      179,  179,  179,  179,    8,  103,  120,  179,   40,  179,
      179,   78,  179,   71,  179,  179,  179,   10,  179,  113,
      179,  179,  179,  179,  179,  179,   74,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  108,  179,
      179,  179,  179,   70,  179,  179,  179,  131,  179,  179,
      179,   32,  179,   18,   34,  179,    7,  179,  179,  179,

      102,  179,  179,  145,  179,  179,  179,  179,  179,   47,
      179,   24,   14,  179,  179,  155,  179,   84,  179,  179,
      179,   92,  139,  174,  179,  179,  179,  142,  179,  179,
      179,  159,  179,   33,  179,  179,  179,  179,   75,   90,
      118,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  132,  179,  179,   49,  171,   56,    2,  179,  179,
      179,  137,  179,   31,  179,   72,   63,  179,  179,  172,
        5,  128,  116,  179,  179,  179,   27,  114,   91,  179,
      179,  179,  150,  154,  111,  179,   51,  179,  179,   76,
      179,   77,  125,  179,  179,  179,   23,  173,   15,   36,

      179,   46,  179,  179,   39,  179,  179,  179,   80,  105,
      179,  179,  179,   28,  179,  179,  165,   43,  158,  179,
      152,  179,   41,  179,   59,  179,   66,  179,  179,  179,
       58,   25,  179,  179,  179,  179,  179,  179,   52,  141,
      179,  179,  170,  136,  179,  179,   53,  148,   81,  162,
      115,   13,   83,   17,   68,  179,  143,   12,  144,  179,
       95,   87,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    1,   18,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,    1,   49,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   47,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    2,    1,    1,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[668] =
    {   0,
        0,    0,    0,    0,  219,  210,  215, 1318,   75,   77,
      187,    0,  165, 1318, 1318, 1318, 1318, 1318, 1318, 1318,
      152,  149, 1318,   66, 1318,  145, 1318,  144,   60,   56,
       67,   68,  105,  159,   72,  109,  120,   52,   65,  122,
      157,  172,  218,  134,    0,  180,  207,  270,  214,  161,
      170,   87, 1318, 1318, 1318,    0,  151,  160, 1318,  148,
     1318,   93,  134,  132, 1318, 1318,    0,  101,  121,  163,
      179,  180,  171,  215,  245,  219,  216,    0,  218,  242,
      260,  271,  235,  234,  281,  261,  269,  276,  289,  275,
      292,  322,  286,  295,  284,  320,  288,  322,  296,  304,

      313,  318,    0,  327,  367,  330,  336,  322,  334,  344,
      341,  355,  339,  346,  349,  347,  365,  359,  379,  379,
        0,  374,  391,  388,  378,  394,  382,  386,  399,  391,
      444,  384,  407,  399,  412,  416,  428,  426,  431,    0,
      430,  437,  453,  450,  447,  455,  454,  463,  458,  469,
        0, 1318, 1318,   84,  465,    0,  474,    0,  482,    0,
      490,    0,  481,  490,  478,  496,  494,  507,  489,  508,
      492,  509,  513,  497,  500,    0,  510,  519,  517,  520,
      510,  530,  517,  526,  533,    0,  554,  536,  528,  533,
      537,  541,  546,  566,  558,  566,  559,  561,  571,  573,

      555,  569,  561,  575,  577,  563,  579,  587,  583,  564,
      573,    0,  583,  573,  574,  594,  602,  615,  616,  600,
      605,  617,  626,  622,  619,  627,  614,  625,  630,  631,
      634,  622,  622,  636,  641,  632,  644,  641,  638,  631,
      648,  640,  657,  647,  647,  650,  657,  664,  676,    0,
      669,  674,  675,  674,  671,  678,  674,  687,  690,  682,
      683,  685,  684,  702,  690,  684,  711,  684,  694,  706,
      705,  700,  704,  709,  713,  714,  723,  731,  741,  733,
      745,  750,    0,    0,  751,  742,  741,  743,  736,  738,
      740,  755,  749,  742,  746,  760,  747,    0,  759,  758,

        0,    0,    0,  756,  752,  753,  758,  778,  782,  786,
      776,  779,  786,  796,    0,    0,  786,  806,  794,  797,
        0,  808,  789,  805,  797,  798,  813,  812,    0,  808,
        0,  801,    0,    0,    0,  803,  812,  817,  807,  820,
      817,  815,  816,  829,  820,  829,  846,  841,  841,  843,
      847,    0,  857,  848,  865,  870,  867,  868,    0,  857,
      858,  874,  866,  879,  864,  865,    0,  870,  882,  875,
      876,  885,  877,    0,    0,    0,  886,    0,  873,  877,
      885,  886,  904,  896,  912,  916,  917,  917,    0,    0,
      922,  915,    0,    0,  917,    0,    0,    0,  927,    0,

      928,  914,  934,  932,  935,    0,  925,  931,  924,  938,
        0,  930,  944,  935,  930,  932,  947,  939,  949,  938,
      955,  947,  952,  973,    0,  961,    0,    0,  958,  978,
      977,  975,  971,  984,  983,  988,  993,    0,  975,  995,
      993,  980,  988, 1001,    0,    0,    0,  998,    0,  990,
     1004,    0,  993,    0,  999,  990,  998,    0,  994,    0,
     1026,  997, 1014, 1000, 1013, 1032,    0, 1020, 1036, 1040,
     1042, 1047, 1042, 1038, 1049, 1034, 1050, 1047,    0, 1040,
     1054, 1041, 1048,    0, 1058, 1057, 1060,    0, 1048, 1067,
     1056,    0, 1049,    0,    0, 1059,    0, 1060, 1073, 1059,

        0, 1084, 1090,    0, 1076, 1087, 1081, 1100, 1088,    0,
     1104,    0,    0, 1105, 1106,    0, 1092,    0, 1104, 1100,
     1100,    0,    0,    0, 1115, 1114, 1107,    0, 1116, 1104,
     1118,    0, 1117,    0, 1124, 1115, 1121, 1127,    0,    0,
        0, 1120, 1124, 1122, 1129, 1130, 1122, 1130, 1147, 1145,
     1137,    0, 1160, 1163,    0,    0,    0,    0, 1153, 1169,
     1153,    0, 1168,    0, 1168,    0,    0, 1156, 1168,    0,
        0,    0, 1172, 1173, 1159, 1171,    0,    0,    0, 1178,
     1182, 1164,    0,    0,    0, 1171,    0, 1173, 1168,    0,
     1178,    0,    0, 1189, 1188, 1182,    0,    0,    0,    0,

     1183,    0, 1185, 1192,    0, 1193, 1194, 1216,    0,    0,
     1201, 1205, 1208,    0, 1222, 1226,    0,    0,    0, 1213,
        0, 1218,    0, 1231,    0, 1227,    0, 1230, 1211, 1218,
        0,    0, 1225, 1233, 1228, 1238, 1239, 1240,    0,    0,
     1222, 1244,    0,    0, 1230, 1240,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1234,    0,    0,    0, 1249,
        0,    0, 1318, 1305, 1309,   93, 1313
    } ;

static const flex_int16_t yy_def[668] =
    {   0,
      663,    1,    1,    1,  664,  664,  663,  663,  663,  663,
      663,  665,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  663,  663,  663,  667,  663,  663,  663,  665,
      663,  663,  663,  663,  663,  663,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      667,  663,  663,  663,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,

      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,    0,  663,  663,  663,  663
    } ;

static const flex_int16_t yy_nxt[1395] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   45,   52,   45,   53,   54,   55,
        8,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   45,   52,   58,   58,   58,   58,
       64,   75,   62,   68,   69,   76,   70,  107,   79,   84,
      108,   77,   71,   85,   72,   80,   67,   86,   73,   74,

      154,   78,   81,   87,   99,   82,   88,   64,   83,   62,
      100,   75,  150,   68,   69,   76,   70,  107,   79,   84,
      108,   77,   71,   85,   72,   80,   89,   86,   73,   74,
      101,   78,   81,   87,   99,   82,   88,   90,   83,   91,
      100,  155,  150,  109,  102,  156,  103,  110,  154,   92,
       63,  111,  153,  104,  105,  127,   89,  112,  152,  106,
      101,   58,   58,   66,   65,   63,  128,   90,   62,   91,
       61,  155,  129,  109,  102,  156,  103,  110,  113,   92,
       93,  111,  146,  104,  105,  127,  114,  112,   94,  106,
      147,   95,  115,  116,   96,  117,  128,   97,  148,  149,

       98,  130,  129,  157,  160,  131,   59,  118,  113,  161,
       93,  158,  146,  119,  663,  132,  114,   57,   94,  159,
      147,   95,  115,  116,   96,  117,   57,   97,  148,  149,
       98,  130,  133,  157,  160,  131,  134,  118,  162,  161,
      135,  158,  663,  119,  120,  132,  166,  142,  143,  159,
      144,  167,  121,  145,  122,  663,  123,  168,  124,  125,
      126,  663,  133,  169,  663,  663,  134,  170,  162,  663,
      135,  163,  164,  175,  120,  663,  166,  142,  143,  176,
      144,  167,  121,  145,  122,  165,  123,  168,  124,  125,
      126,  136,  171,  169,  172,  137,  173,  170,  138,  139,

      181,  163,  164,  175,  177,  140,  174,  178,  141,  176,
      182,  183,  184,  179,  185,  165,  186,  663,  191,  194,
      180,  136,  171,  197,  172,  137,  173,  192,  138,  139,
      181,  200,  663,  193,  177,  140,  174,  178,  141,  201,
      182,  183,  184,  179,  185,  187,  186,  188,  191,  194,
      180,  189,  195,  197,  198,  202,  199,  192,  196,  203,
      204,  200,  190,  193,  210,  211,  663,  212,  213,  201,
      215,  663,  216,  214,  217,  187,  663,  188,  218,  219,
      220,  189,  195,  221,  198,  202,  199,  222,  196,  203,
      204,  205,  190,  223,  210,  211,  206,  212,  213,  224,

      215,  207,  216,  214,  217,  227,  208,  209,  218,  219,
      220,  225,  226,  221,  228,  229,  230,  222,  231,  232,
      233,  205,  234,  223,  235,  238,  206,  247,  236,  224,
      248,  207,  251,  252,  237,  227,  208,  209,  253,  249,
      663,  225,  226,  663,  228,  229,  230,  250,  231,  232,
      233,  256,  234,  663,  235,  238,  257,  247,  236,  258,
      248,  254,  251,  252,  237,  239,  260,  240,  253,  249,
      241,  259,  255,  242,  264,  261,  265,  250,  243,  268,
      244,  256,  262,  245,  246,  263,  257,  266,  269,  258,
      272,  254,  270,  267,  273,  239,  260,  240,  271,  274,

      241,  259,  255,  242,  264,  261,  265,  275,  243,  268,
      244,  276,  262,  245,  246,  263,  277,  266,  269,  278,
      272,  279,  270,  267,  273,  280,  281,  285,  271,  274,
      282,  286,  283,  287,  290,  288,  291,  275,  292,  293,
      294,  276,  297,  298,  295,  296,  277,  284,  289,  278,
      299,  279,  300,  301,  302,  280,  281,  285,  303,  306,
      282,  286,  283,  287,  290,  288,  291,  307,  292,  293,
      294,  308,  297,  298,  295,  296,  309,  284,  289,  304,
      299,  310,  300,  301,  302,  311,  305,  312,  303,  306,
      313,  314,  315,  316,  317,  318,  319,  307,  320,  321,

      322,  308,  323,  324,  325,  330,  309,  331,  328,  304,
      332,  310,  326,  333,  334,  311,  305,  312,  329,  335,
      313,  314,  315,  316,  317,  318,  319,  327,  320,  321,
      322,  336,  323,  324,  325,  330,  337,  331,  328,  338,
      332,  339,  326,  333,  334,  340,  341,  343,  329,  335,
      344,  345,  346,  347,  348,  349,  350,  327,  342,  351,
      352,  336,  353,  354,  355,  356,  337,  357,  358,  338,
      359,  339,  360,  361,  362,  340,  341,  343,  363,  364,
      344,  345,  346,  347,  348,  349,  350,  365,  342,  351,
      352,  366,  353,  354,  355,  356,  367,  357,  358,  368,

      359,  369,  360,  361,  362,  370,  371,  372,  363,  364,
      373,  374,  375,  376,  377,  378,  379,  365,  380,  383,
      381,  366,  382,  384,  385,  386,  367,  389,  390,  368,
      392,  369,  391,  393,  387,  370,  371,  372,  394,  395,
      373,  374,  375,  376,  377,  378,  379,  396,  380,  383,
      381,  397,  382,  384,  385,  386,  388,  389,  390,  398,
      392,  399,  391,  393,  387,  400,  401,  402,  394,  395,
      403,  404,  405,  406,  407,  408,  409,  396,  410,  411,
      412,  397,  413,  414,  415,  416,  388,  417,  418,  398,
      419,  399,  420,  421,  422,  400,  401,  402,  423,  424,

      403,  404,  405,  406,  407,  408,  409,  425,  410,  411,
      412,  426,  413,  414,  415,  416,  427,  417,  418,  428,
      419,  429,  420,  421,  422,  430,  431,  432,  423,  424,
      433,  434,  435,  436,  437,  438,  439,  425,  440,  441,
      443,  426,  444,  445,  446,  447,  427,  448,  449,  428,
      442,  429,  450,  451,  452,  430,  431,  432,  453,  454,
      433,  434,  435,  436,  437,  438,  439,  455,  440,  441,
      443,  456,  444,  445,  446,  447,  457,  448,  449,  458,
      442,  459,  450,  451,  452,  460,  461,  462,  453,  454,
      463,  465,  466,  467,  464,  468,  469,  455,  470,  471,

      472,  456,  473,  474,  475,  476,  457,  477,  478,  458,
      479,  459,  480,  481,  482,  460,  461,  462,  483,  484,
      463,  465,  466,  467,  464,  468,  469,  485,  470,  471,
      472,  486,  473,  474,  475,  476,  487,  477,  478,  488,
      479,  489,  480,  481,  482,  490,  491,  492,  483,  484,
      493,  494,  495,  496,  497,  498,  499,  485,  500,  501,
      502,  486,  503,  504,  505,  506,  487,  507,  508,  488,
      509,  489,  510,  511,  512,  490,  491,  492,  513,  514,
      493,  494,  495,  496,  497,  498,  499,  515,  500,  501,
      502,  516,  503,  504,  505,  506,  517,  507,  508,  518,

      509,  519,  510,  511,  512,  520,  521,  522,  513,  514,
      523,  524,  525,  526,  527,  528,  529,  515,  530,  531,
      532,  516,  533,  534,  535,  536,  517,  537,  538,  518,
      539,  519,  540,  541,  544,  520,  521,  522,  545,  546,
      523,  524,  525,  526,  527,  528,  529,  542,  530,  531,
      532,  547,  533,  534,  535,  536,  548,  537,  538,  549,
      539,  550,  540,  541,  544,  551,  543,  552,  545,  546,
      553,  554,  555,  556,  557,  558,  559,  542,  560,  561,
      562,  547,  563,  564,  565,  566,  548,  567,  568,  549,
      569,  550,  570,  571,  572,  551,  543,  552,  573,  574,

      553,  554,  555,  556,  557,  558,  559,  575,  560,  561,
      562,  576,  563,  564,  565,  566,  577,  567,  568,  578,
      569,  579,  570,  571,  572,  580,  581,  582,  573,  574,
      583,  584,  585,  586,  587,  588,  589,  575,  590,  591,
      592,  576,  593,  594,  595,  596,  577,  597,  598,  578,
      599,  579,  600,  601,  602,  580,  581,  582,  603,  604,
      583,  584,  585,  586,  587,  588,  589,  605,  590,  591,
      592,  606,  593,  594,  595,  596,  607,  597,  598,  608,
      599,  609,  600,  601,  602,  610,  611,  612,  603,  604,
      613,  614,  615,  616,  617,  618,  619,  605,  620,  621,

      622,  606,  623,  624,  625,  626,  607,  627,  628,  608,
      629,  609,  630,  631,  632,  610,  611,  612,  633,  634,
      613,  614,  615,  616,  617,  618,  619,  635,  620,  621,
      622,  636,  623,  624,  625,  626,  637,  627,  628,  638,
      629,  639,  630,  631,  632,  640,  641,  642,  633,  634,
      643,  644,  645,  646,  647,  648,  649,  635,  650,  651,
      652,  636,  653,  654,  655,  656,  637,  657,  658,  638,
      659,  639,  660,  661,  662,  640,  641,  642,  663,  663,
      643,  644,  645,  646,  647,  648,  649,  663,  650,  651,
      652,  663,  653,  654,  655,  656,  663,  657,  658,  663,

      659,  663,  660,  661,  662,   56,   56,   56,   56,   60,
      663,   60,   60,  151,  151,  663,  151,    7,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663

    } ;

static const flex_int16_t yy_chk[1395] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,    9,   10,   10,
       24,   30,   24,   29,   29,   30,   29,   38,   31,   32,
       39,   30,   29,   32,   29,   31,  666,   32,   29,   29,

      154,   30,   31,   32,   35,   31,   32,   62,   31,   62,
       35,   30,   52,   29,   29,   30,   29,   38,   31,   32,
       39,   30,   29,   32,   29,   31,   33,   32,   29,   29,
       36,   30,   31,   32,   35,   31,   32,   33,   31,   33,
       35,   68,   52,   40,   36,   69,   37,   40,   64,   33,
       63,   40,   60,   37,   37,   44,   33,   40,   57,   37,
       36,   58,   58,   28,   26,   22,   44,   33,   21,   33,
       13,   68,   44,   40,   36,   69,   37,   40,   41,   33,
       34,   40,   50,   37,   37,   44,   41,   40,   34,   37,
       50,   34,   41,   42,   34,   42,   44,   34,   51,   51,

       34,   46,   44,   70,   72,   46,   11,   42,   41,   73,
       34,   71,   50,   42,    7,   46,   41,    6,   34,   71,
       50,   34,   41,   42,   34,   42,    5,   34,   51,   51,
       34,   46,   47,   70,   72,   46,   47,   42,   74,   73,
       47,   71,    0,   42,   43,   46,   76,   49,   49,   71,
       49,   77,   43,   49,   43,    0,   43,   79,   43,   43,
       43,    0,   47,   80,    0,    0,   47,   80,   74,    0,
       47,   75,   75,   83,   43,    0,   76,   49,   49,   84,
       49,   77,   43,   49,   43,   75,   43,   79,   43,   43,
       43,   48,   81,   80,   81,   48,   82,   80,   48,   48,

       86,   75,   75,   83,   85,   48,   82,   85,   48,   84,
       87,   88,   89,   85,   90,   75,   91,    0,   93,   95,
       85,   48,   81,   97,   81,   48,   82,   94,   48,   48,
       86,   99,    0,   94,   85,   48,   82,   85,   48,  100,
       87,   88,   89,   85,   90,   92,   91,   92,   93,   95,
       85,   92,   96,   97,   98,  101,   98,   94,   96,  102,
      104,   99,   92,   94,  106,  107,    0,  108,  109,  100,
      110,    0,  111,  109,  111,   92,    0,   92,  112,  113,
      114,   92,   96,  115,   98,  101,   98,  116,   96,  102,
      104,  105,   92,  117,  106,  107,  105,  108,  109,  118,

      110,  105,  111,  109,  111,  120,  105,  105,  112,  113,
      114,  119,  119,  115,  122,  123,  124,  116,  125,  126,
      127,  105,  128,  117,  129,  130,  105,  132,  129,  118,
      133,  105,  134,  135,  129,  120,  105,  105,  136,  133,
        0,  119,  119,    0,  122,  123,  124,  133,  125,  126,
      127,  138,  128,    0,  129,  130,  139,  132,  129,  141,
      133,  137,  134,  135,  129,  131,  142,  131,  136,  133,
      131,  141,  137,  131,  144,  143,  145,  133,  131,  147,
      131,  138,  143,  131,  131,  143,  139,  146,  148,  141,
      150,  137,  149,  146,  155,  131,  142,  131,  149,  157,

      131,  141,  137,  131,  144,  143,  145,  159,  131,  147,
      131,  161,  143,  131,  131,  143,  163,  146,  148,  164,
      150,  165,  149,  146,  155,  166,  167,  169,  149,  157,
      168,  170,  168,  171,  173,  172,  174,  159,  175,  177,
      178,  161,  179,  180,  178,  178,  163,  168,  172,  164,
      181,  165,  182,  183,  184,  166,  167,  169,  185,  188,
      168,  170,  168,  171,  173,  172,  174,  189,  175,  177,
      178,  190,  179,  180,  178,  178,  191,  168,  172,  187,
      181,  192,  182,  183,  184,  193,  187,  194,  185,  188,
      195,  196,  197,  198,  199,  200,  201,  189,  202,  203,

      204,  190,  205,  206,  207,  210,  191,  211,  209,  187,
      213,  192,  208,  214,  215,  193,  187,  194,  209,  216,
      195,  196,  197,  198,  199,  200,  201,  208,  202,  203,
      204,  217,  205,  206,  207,  210,  218,  211,  209,  219,
      213,  220,  208,  214,  215,  221,  222,  223,  209,  216,
      224,  225,  226,  227,  228,  229,  230,  208,  222,  231,
      232,  217,  233,  234,  235,  236,  218,  237,  238,  219,
      239,  220,  240,  241,  242,  221,  222,  223,  243,  244,
      224,  225,  226,  227,  228,  229,  230,  245,  222,  231,
      232,  246,  233,  234,  235,  236,  247,  237,  238,  248,

      239,  249,  240,  241,  242,  251,  252,  253,  243,  244,
      254,  255,  256,  257,  258,  259,  260,  245,  261,  263,
      262,  246,  262,  264,  265,  266,  247,  268,  269,  248,
      270,  249,  269,  271,  267,  251,  252,  253,  272,  273,
      254,  255,  256,  257,  258,  259,  260,  274,  261,  263,
      262,  275,  262,  264,  265,  266,  267,  268,  269,  276,
      270,  277,  269,  271,  267,  278,  279,  280,  272,  273,
      281,  282,  285,  286,  287,  288,  289,  274,  290,  291,
      292,  275,  293,  294,  295,  296,  267,  297,  299,  276,
      300,  277,  304,  305,  306,  278,  279,  280,  307,  308,

      281,  282,  285,  286,  287,  288,  289,  309,  290,  291,
      292,  310,  293,  294,  295,  296,  311,  297,  299,  312,
      300,  313,  304,  305,  306,  314,  317,  318,  307,  308,
      319,  320,  322,  323,  324,  325,  326,  309,  327,  328,
      330,  310,  332,  336,  337,  338,  311,  339,  340,  312,
      328,  313,  341,  342,  343,  314,  317,  318,  344,  345,
      319,  320,  322,  323,  324,  325,  326,  346,  327,  328,
      330,  347,  332,  336,  337,  338,  348,  339,  340,  349,
      328,  350,  341,  342,  343,  351,  353,  354,  344,  345,
      355,  356,  357,  358,  355,  360,  361,  346,  362,  363,

      364,  347,  365,  366,  368,  369,  348,  370,  371,  349,
      372,  350,  373,  377,  379,  351,  353,  354,  380,  381,
      355,  356,  357,  358,  355,  360,  361,  382,  362,  363,
      364,  383,  365,  366,  368,  369,  384,  370,  371,  385,
      372,  386,  373,  377,  379,  387,  388,  391,  380,  381,
      392,  395,  399,  401,  402,  403,  404,  382,  405,  407,
      408,  383,  409,  410,  412,  413,  384,  414,  415,  385,
      416,  386,  417,  418,  419,  387,  388,  391,  420,  421,
      392,  395,  399,  401,  402,  403,  404,  422,  405,  407,
      408,  423,  409,  410,  412,  413,  424,  414,  415,  426,

      416,  429,  417,  418,  419,  430,  431,  432,  420,  421,
      433,  434,  435,  436,  437,  439,  440,  422,  441,  442,
      443,  423,  444,  448,  450,  451,  424,  453,  455,  426,
      456,  429,  457,  459,  462,  430,  431,  432,  463,  464,
      433,  434,  435,  436,  437,  439,  440,  461,  441,  442,
      443,  465,  444,  448,  450,  451,  466,  453,  455,  468,
      456,  469,  457,  459,  462,  470,  461,  471,  463,  464,
      472,  473,  474,  475,  476,  477,  478,  461,  480,  481,
      482,  465,  483,  485,  486,  487,  466,  489,  490,  468,
      491,  469,  493,  496,  498,  470,  461,  471,  499,  500,

      472,  473,  474,  475,  476,  477,  478,  502,  480,  481,
      482,  503,  483,  485,  486,  487,  505,  489,  490,  506,
      491,  507,  493,  496,  498,  508,  509,  511,  499,  500,
      514,  515,  517,  519,  520,  521,  525,  502,  526,  527,
      529,  503,  530,  531,  533,  535,  505,  536,  537,  506,
      538,  507,  542,  543,  544,  508,  509,  511,  545,  546,
      514,  515,  517,  519,  520,  521,  525,  547,  526,  527,
      529,  548,  530,  531,  533,  535,  549,  536,  537,  550,
      538,  551,  542,  543,  544,  553,  554,  559,  545,  546,
      560,  561,  563,  565,  568,  569,  573,  547,  574,  575,

      576,  548,  580,  581,  582,  586,  549,  588,  589,  550,
      591,  551,  594,  595,  596,  553,  554,  559,  601,  603,
      560,  561,  563,  565,  568,  569,  573,  604,  574,  575,
      576,  606,  580,  581,  582,  586,  607,  588,  589,  608,
      591,  611,  594,  595,  596,  612,  613,  615,  601,  603,
      616,  620,  622,  624,  626,  628,  629,  604,  630,  633,
      634,  606,  635,  636,  637,  638,  607,  641,  642,  608,
      645,  611,  646,  656,  660,  612,  613,  615,    0,    0,
      616,  620,  622,  624,  626,  628,  629,    0,  630,  633,
      634,    0,  635,  636,  637,  638,    0,  641,  642,    0,

      645,    0,  646,  656,  660,  664,  664,  664,  664,  665,
        0,  665,  665,  667,  667,    0,  667,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex.l"
#line 2 "flex.l"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>
#include <string>
#include <cstring>
#define TOKEN(name) { return SQL_##name; }
static thread_local std::stringstream strbuf;
#line 1193 "flex_lexer.cpp"

#line 1195 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define singlequotedstring 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 26 "flex.l"

#line 1481 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 664 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 663 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "flex.l"
TOKEN(OP_NOTEQUAL)
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "flex.l"
TOKEN(SIMPLE)
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "flex.l"
TOKEN(TEXT)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "flex.l"
TOKEN(OVER)
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "flex.l"
TOKEN(BETWEEN)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "flex.l"
TOKEN(OP_SEMI)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "flex.l"
TOKEN(BIGINT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "flex.l"
TOKEN(LIMIT)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "flex.l"
TOKEN(WITH)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "flex.l"
TOKEN(ORDER)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "flex.l"
TOKEN(LAST)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "flex.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "flex.l"
TOKEN(PRECEDING)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "flex.l"
TOKEN(EXCEPT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "flex.l"
TOKEN(NUMERIC)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "flex.l"
TOKEN(OP_LESSTHAN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "flex.l"
TOKEN(PROCEDURE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "flex.l"
TOKEN(ACTION)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "flex.l"
TOKEN(FIRST)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "flex.l"
TOKEN(OP_GREATEREQ)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "flex.l"
TOKEN(CHECK)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "flex.l"
TOKEN(FULL)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "flex.l"
TOKEN(NATURAL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "flex.l"
TOKEN(DOUBLE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "flex.l"
TOKEN(NATIONAL)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "flex.l"
TOKEN(OP_ADD)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "flex.l"
TOKEN(CURRENT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "flex.l"
TOKEN(TRIGGER)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "flex.l"
TOKEN(OP_SUB)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "flex.l"
TOKEN(FALSE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "flex.l"
TOKEN(UNIQUE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "flex.l"
TOKEN(WHERE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "flex.l"
TOKEN(MINUTE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "flex.l"
TOKEN(BEFORE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "flex.l"
TOKEN(ON)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "flex.l"
TOKEN(PARTIAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "flex.l"
TOKEN(OF)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "flex.l"
TOKEN(AFTER)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "flex.l"
TOKEN(PRIMARY)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "flex.l"
TOKEN(MONTH)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "flex.l"
TOKEN(DEFERRED)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "flex.l"
TOKEN(OP_DOUBLE_DOLLAR)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "flex.l"
TOKEN(VARYING)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "flex.l"
TOKEN(OP_GREATERTHAN)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "flex.l"
TOKEN(OR)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "flex.l"
TOKEN(PLPGSQL)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "flex.l"
TOKEN(DELETE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "flex.l"
TOKEN(INDEX)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "flex.l"
TOKEN(RETURN)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "flex.l"
TOKEN(OP_MUL)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "flex.l"
TOKEN(FOREIGN)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "flex.l"
TOKEN(RESTRICT)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "flex.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "flex.l"
TOKEN(TIES)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "flex.l"
TOKEN(DEC)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "flex.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "flex.l"
TOKEN(BEGIN)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "flex.l"
TOKEN(LANGUAGE)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "flex.l"
TOKEN(DISTINCT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "flex.l"
TOKEN(TRUE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "flex.l"
TOKEN(BY)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "flex.l"
TOKEN(OP_MOD)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "flex.l"
TOKEN(VALUES)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "flex.l"
TOKEN(IS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "flex.l"
TOKEN(ROW)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "flex.l"
TOKEN(FUNCTION)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "flex.l"
TOKEN(END)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "flex.l"
TOKEN(RECURSIVE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "flex.l"
TOKEN(FOR)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "flex.l"
TOKEN(UNION)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "flex.l"
TOKEN(NULLS)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "flex.l"
TOKEN(UPDATE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "flex.l"
TOKEN(ELSE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "flex.l"
TOKEN(RANGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "flex.l"
TOKEN(OFFSET)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "flex.l"
TOKEN(INDEXED)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "flex.l"
TOKEN(INSTEAD)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "flex.l"
TOKEN(NCHAR)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "flex.l"
TOKEN(AND)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "flex.l"
TOKEN(REINDEX)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "flex.l"
TOKEN(INITIALLY)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "flex.l"
TOKEN(YEAR)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "flex.l"
TOKEN(PRECISION)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "flex.l"
TOKEN(FILTER)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "flex.l"
TOKEN(NOT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "flex.l"
TOKEN(VIEW)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "flex.l"
TOKEN(DEFFERRABLE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "flex.l"
TOKEN(REAL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "flex.l"
TOKEN(THEN)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "flex.l"
TOKEN(OPTION)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "flex.l"
TOKEN(DEFAULT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "flex.l"
TOKEN(GLOBAL)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "flex.l"
TOKEN(CROSS)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "flex.l"
TOKEN(CHAR)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "flex.l"
TOKEN(REFERENCES)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "flex.l"
TOKEN(OP_XOR)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "flex.l"
TOKEN(GROUP)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "flex.l"
TOKEN(CASE)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "flex.l"
TOKEN(SET)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "flex.l"
TOKEN(HOUR)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "flex.l"
TOKEN(NO)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "flex.l"
TOKEN(COLUMN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 129 "flex.l"
TOKEN(LOCAL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 130 "flex.l"
TOKEN(DROP)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 131 "flex.l"
TOKEN(REPLACE)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 132 "flex.l"
TOKEN(ASC)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 133 "flex.l"
TOKEN(OP_COMMA)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 134 "flex.l"
TOKEN(TABLE)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 135 "flex.l"
TOKEN(ARRAY)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 136 "flex.l"
TOKEN(IF)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 137 "flex.l"
TOKEN(EXTRACT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 138 "flex.l"
TOKEN(LEFT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 139 "flex.l"
TOKEN(OUTER)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 140 "flex.l"
TOKEN(DECIMAL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 141 "flex.l"
TOKEN(PARTITION)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 142 "flex.l"
TOKEN(CASCADE)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 143 "flex.l"
TOKEN(ADD)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 144 "flex.l"
TOKEN(OTHERS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 145 "flex.l"
TOKEN(OP_LESSEQ)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 146 "flex.l"
TOKEN(MATCH)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 147 "flex.l"
TOKEN(ALL)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 148 "flex.l"
TOKEN(ROWS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 149 "flex.l"
TOKEN(JOIN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 150 "flex.l"
TOKEN(LIKE)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 151 "flex.l"
TOKEN(INTEGER)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 152 "flex.l"
TOKEN(OP_RP)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 153 "flex.l"
TOKEN(INT)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 154 "flex.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 155 "flex.l"
TOKEN(KEY)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 156 "flex.l"
TOKEN(EACH)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 157 "flex.l"
TOKEN(USING)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 158 "flex.l"
TOKEN(RENAME)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 159 "flex.l"
TOKEN(DO)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 160 "flex.l"
TOKEN(FLOAT)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 161 "flex.l"
TOKEN(OP_LP)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 162 "flex.l"
TOKEN(CHARACTER)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 163 "flex.l"
TOKEN(UMINUS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 164 "flex.l"
TOKEN(CAST)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 165 "flex.l"
TOKEN(GROUPS)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 166 "flex.l"
TOKEN(NULL)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 167 "flex.l"
TOKEN(SMALLINT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 168 "flex.l"
TOKEN(INSERT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 169 "flex.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 170 "flex.l"
TOKEN(CONSTRAINT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 171 "flex.l"
TOKEN(CREATE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 172 "flex.l"
TOKEN(OP_LBRACKET)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 173 "flex.l"
TOKEN(WHEN)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 174 "flex.l"
TOKEN(IMMEDIATE)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 175 "flex.l"
TOKEN(TO)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 176 "flex.l"
TOKEN(EXCLUDE)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 177 "flex.l"
TOKEN(DAY)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 178 "flex.l"
TOKEN(CONFLICT)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 179 "flex.l"
TOKEN(OP_RBRACKET)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 180 "flex.l"
TOKEN(EXECUTE)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 181 "flex.l"
TOKEN(EXISTS)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 182 "flex.l"
TOKEN(INTO)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 183 "flex.l"
TOKEN(OP_DIVIDE)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 184 "flex.l"
TOKEN(CASCADED)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 185 "flex.l"
TOKEN(ISNULL)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 186 "flex.l"
TOKEN(AS)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 187 "flex.l"
TOKEN(INNER)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 188 "flex.l"
TOKEN(INTERSECT)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 189 "flex.l"
TOKEN(IN)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 190 "flex.l"
TOKEN(OP_EQUAL)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 191 "flex.l"
TOKEN(VARCHAR)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 192 "flex.l"
TOKEN(ALTER)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 193 "flex.l"
TOKEN(DESC)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 194 "flex.l"
TOKEN(FROM)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 195 "flex.l"
TOKEN(TEMP)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 196 "flex.l"
TOKEN(UNLOGGED)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 197 "flex.l"
TOKEN(SECOND)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 198 "flex.l"
TOKEN(WINDOW)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 199 "flex.l"
TOKEN(NOTHING)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 200 "flex.l"
TOKEN(HAVING)
	YY_BREAK
case 175:
#line 202 "flex.l"
case 176:
YY_RULE_SETUP
#line 202 "flex.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATLITERAL;
	}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 207 "flex.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTLITERAL;
	}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 212 "flex.l"
{
	std::string s(yytext);
	yylval->sval = strdup(s.substr(1, s.size()-1).c_str());
	return SQL_STRINGLITERAL;
	}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 218 "flex.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
	}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 223 "flex.l"
{
	BEGIN singlequotedstring; strbuf = std::stringstream{}; strbuf << '\'';
	}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 227 "flex.l"
{
	strbuf << '\'';
	}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 231 "flex.l"
{
	strbuf << yytext;
	}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 235 "flex.l"
{
	BEGIN 0; 
	strbuf << '\'';
	yylval->sval = strdup(strbuf.str().c_str());
	return SQL_STRINGLITERAL;
	}
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 242 "flex.l"
{
	return 0;
	}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 246 "flex.l"
{
	}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 249 "flex.l"
{
	return 0;
	}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 253 "flex.l"
ECHO;
	YY_BREAK
#line 2496 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 664 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 664 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 663);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 253 "flex.l"


